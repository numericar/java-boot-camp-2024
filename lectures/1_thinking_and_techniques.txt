Applying computational thinking and techniques

    Programming 
        เป็นการเขียนคำสั่ง เพื่อสั่งให้คอมพิวเตอร์ทำงานตามที่เราบอก (Command to computer)

    Routine of developer
        1. Problem statement: เราได้ปัญหามาแล้ว เราจะต้องแก้ปัญหาอย่างไร หรือจะต้องไปสื่อสารกับทีมไหน
        2. Debugging: เมื่อเจอกับปัญหาต่าง ๆ จะต้องมีการตรวจสอบการทำงาน โดยจะตองมีขั้นตอนตามนี้
            2.1 Analyze: วิเคราะห์ว่า สิ่งที่เกิดขึ้นมีอะไรบ้าง (Daily scenarios)
             
    ก่อนเริ่มขียนโปรแกรม
        1. Problem-Solving focus โดยจะมีขั้นตอนการทำกังนี้
            1.1 Decomposition: เราจะต้องรู้ก่อนว่า เป้าหมายคืออะไร และตอนนี้มีปัญหาอะไรที่ทำให้ไม่สามารถทำให้เป้าหมายสำเร็จได้ 
                               โดยเราย่อยปัญหาใหญ่ ๆ ให้กลายเป็นปัญหาย่อย ๆ (Chunk of work)
                               [ Big Problem ] ---> [small problem] + [small problem] + [small problem] ---> [ Goal ]

        2. Pattern Recognition: นำวิธีการแก้ปัญหานี้ ไปแก้ปัญหาอื่น ๆ ที่เกิดขึ้นซ้ำ ๆ ที่อาจจะเกี่ยวข้องกัน ซึ่งอาจจะทำให้เกิดประสิทธิภาพมากขึ้น
                                โดยนำวิธีการแกปัญหาบางส่วน ที่เคยใช้แก้ปัญหาเก่าไปแล้ว มาแก้ปัญหาใหม่ที่มีรูปแบบปัญหาคล้าย ๆ กัน
        
        3. Abstraction: มองปัญหา แต่ยังไม่ต้องมองว่าสิ่ง ๆ นั้นมีรายละเอียดมากน้อยแค่ไหน

        4. Algorithm Design: เป็นวิธีการแก้ปัญหาแบบมีขั้นตอนและผลลัพธ์ที่แน่ชัด โดยจะแบ่งวิธีการที่ใช้ในการออกแบบเป็น 2 อย่าง คือ
            4.1 Pseudocode: โฟกัสไปที่ sequence of execution statement 
            4.2 Flowchart: โฟกัสไปที่ sequence of execution statement but symbolic (แทนขั้นตอนการทำงานด้วยเครื่องหมายสัญลักษณ์)
                             โดยทั้ง 2 วิธีการ จะเป็นกรโฟกัสในเรื่องของการทำงานแบบ step by step execution

        ? (ambiguty หรือ ความคุมเครือ) คือสิ่งที่เราต้องเก็บรายละเอียดการจะ design algorithm (solve ambiguty) 